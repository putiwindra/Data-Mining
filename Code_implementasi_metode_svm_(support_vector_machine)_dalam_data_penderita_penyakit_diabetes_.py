# -*- coding: utf-8 -*-
"""IMPLEMENTASI METODE SVM (SUPPORT VECTOR MACHINE) DALAM DATA  PENDERITA PENYAKIT DIABETES .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1elZxPmfKs2T8jXcsFaWjZn8J_Lzle5Pq

# Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt

# %matplotlib inline

from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import scale
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import make_pipeline

"""# Data Preparation"""

df = pd.read_csv('/content/diabetes.csv')
df.head()

"""# Data cleaning dan EDA"""

df.describe()

df.info()

df.shape

df['Outcome'].value_counts()
#1 Terkena Diabetes
#0 Terhindar Dari Diabetes

df['Outcome'].mean()

df.groupby('Outcome').mean()

df.isnull().sum()

# draw boxplots to visualize outliers

plt.figure(figsize=(24,20))


plt.subplot(4, 2, 1)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('Pregnancies')


plt.subplot(4, 2, 2)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('Glucose')


plt.subplot(4, 2, 3)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('BloodPressure	')


plt.subplot(4, 2, 4)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('SkinThickness')


plt.subplot(4, 2, 5)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('Insulin')


plt.subplot(4, 2, 6)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('BMI')


plt.subplot(4, 2, 7)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('DiabetesPedigreeFunction')

plt.subplot(4, 2, 7)
fig = df.boxplot(column='Age')
fig.set_title('')
fig.set_ylabel('Outcome')

def distribution_plot(x, y, name):
 sns.barplot(x=x, y=y)
 plt.title(name)
 plt.show()

dist_x = df['Glucose'].value_counts()
dist_y = df['Glucose'].value_counts()
distribution_plot(dist_x, dist_y,"Plot distribusi dari Glucose")

dist_x = df['Insulin'].value_counts()
dist_y = df['Insulin'].value_counts()
distribution_plot(dist_x, dist_y,"Plot distribusi dari Insulin")

dfcor = df.corr()
dfcor.mean()

sns.heatmap(dfcor, xticklabels=dfcor.columns, yticklabels=dfcor.columns, annot=True)

"""# PreProcessing

## Membagi data test dan data train
"""

X = df.drop(columns = 'Outcome', axis = 1)
y = df['Outcome']

X=df.iloc[:, :-1]
X.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
standard = scaler.transform(X)
X = standard
Y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,stratify = y, random_state=2)

# X_train = scaler.fit_transform(X_train)
# X_test = scaler.transform(X_test)

y.value_counts().plot.pie(autopct='%.2f')

print(y.value_counts())

"""# Modeling dan Evaluasi Model"""

# Membuat Model dan Training Model

svc=svm.SVC(kernel='linear')
svc.fit(X_train,y_train)

svcrbf=svm.SVC(kernel='rbf')
svcrbf.fit(X_train,y_train)

svcpoli=svm.SVC(kernel='poly')
svcpoli.fit(X_train,y_train)

"""POLI"""

X_train_prediction = svcpoli.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, y_train)
print('Accuracy Score:\n',
      train_data_accuracy)

X_test_prediction = svcpoli.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)
print('Accuracy Score:\n',
      test_data_accuracy)

"""RBF"""

X_train_prediction = svcrbf.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, y_train)
print('Accuracy Score:\n',
      train_data_accuracy)

X_test_prediction = svcrbf.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)
print('Accuracy Score:\n',
      test_data_accuracy)

"""LINEAR"""

#akurasi dari prediksi data Train


X_train_prediction = svc.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, y_train)
print('Accuracy Score:\n',
      train_data_accuracy)

#akurasi dari prediksi data Test

X_test_prediction = svc.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)
print('Accuracy Score:\n',
      test_data_accuracy)

y_pred = svc.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print (cm)

print(f1_score(y_test, y_pred))
print(accuracy_score(y_test, y_pred))

sns.heatmap(cm, annot=True)

from sklearn.metrics import classification_report
import sklearn.metrics as metrics
#accuracy
print("acuracy:", metrics.accuracy_score(y_test,y_pred))
#precision score
print("precision:", metrics.precision_score(y_test,y_pred))
#recall score
print("recall" , metrics.recall_score(y_test,y_pred))
print(classification_report(y_test, y_pred))

"""# Cross Validation dengan K FOLD"""

Kfold = KFold(len(df),shuffle=True)
print("KfoldCrossVal score using SVM is %s" %cross_val_score(svc,X,y,cv=Kfold).mean())

sm = svc.fit(X_train,y_train)
y_pred = sm.predict(X_test)
metrics.accuracy_score(y_test,y_pred)